namespace Server.Core.Authentication
{
	[ApiController]
	[Route("auth")]
	public class JWTAuthController : ControllerBase
	{
		private const string JwtKey = "BodyProjectJWT";
		private const string Issuer = "ServerBP";
		private const string Audience = "AppicationBP";

		[HttpPost("login")]
		public IActionResult Login([FromBody] LoginModel model)
		{
			// üîê –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –ë–î)
			if (model.Login == "admin" && model.Password == "123")
			{
				var accessToken = GenerateToken(model.Login, TimeSpan.FromMinutes(5));     // üîì –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π —Ç–æ–∫–µ–Ω
				var refreshToken = GenerateToken(model.Login, TimeSpan.FromMinutes(60));   // üîÅ —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

				return Ok(new
				{
					accessToken,
					refreshToken
				});
			}

			return Unauthorized();
		}

		[HttpPost("refresh")]
		public IActionResult Refresh([FromBody] RefreshRequest req)
		{
			var handler = new JwtSecurityTokenHandler();

			try
			{
				var token = handler.ReadJwtToken(req.RefreshToken);
				if (token.ValidTo < DateTime.UtcNow)
					return Unauthorized();

				var username = token.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
				if (string.IsNullOrWhiteSpace(username))
					return Unauthorized();

				var newToken = GenerateToken(username, TimeSpan.FromMinutes(5));
				return Ok(new { accessToken = newToken });
			}
			catch
			{
				return Unauthorized();
			}
		}

		private string GenerateToken(string login, TimeSpan expiresIn)
		{
			var claims = new[]
			{
				new Claim(ClaimTypes.Name, login),
				new Claim(ClaimTypes.NameIdentifier, "1"),
				new Claim(ClaimTypes.Role, "admin")
			};

			var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(JwtKey));
			var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

			var token = new JwtSecurityToken(
				issuer: Issuer,
				audience: Audience,
				claims: claims,
				expires: DateTime.UtcNow.Add(expiresIn)
				//signingCredentials: creds –£–±–∏—Ä–∞–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ HMACSHA256
				);

			return new JwtSecurityTokenHandler().WriteToken(token);
		}
	}

	public class LoginModel
	{
		public string Login { get; set; } = string.Empty;
		public string Password { get; set; } = string.Empty;
	}

	public class RefreshRequest
	{
		public string RefreshToken { get; set; } = string.Empty;
	}
}

namespace Server.Core.Authentication
{
    public class JWTAuthenticationStateProvider : AuthenticationStateProvider
    {
        private readonly ProtectedSessionStorage _sessionStorage;
        private ClaimsPrincipal _anonymous = new ClaimsPrincipal(new ClaimsIdentity());
        private string? _cachedToken;

        public JWTAuthenticationStateProvider(ProtectedSessionStorage sessionStorage) => _sessionStorage = sessionStorage;

        public override async Task<AuthenticationState> GetAuthenticationStateAsync()
        {
            try
            {
                if (_cachedToken == null)
                {
                    var tokenResult = await _sessionStorage.GetAsync<string>("accessToken");
                    if (!tokenResult.Success || string.IsNullOrWhiteSpace(tokenResult.Value))
                        return new AuthenticationState(_anonymous);

                    _cachedToken = tokenResult.Value;
                }

                var identity = ParseClaimsFromJwt(_cachedToken);
                var user = new ClaimsPrincipal(identity);
                return new AuthenticationState(user);
            }
            catch
            {
                return new AuthenticationState(_anonymous);
            }
        }

        public async Task MarkUserAsAuthenticated(string token)
        {
            _cachedToken = token;
            await _sessionStorage.SetAsync("accessToken", token);
            var identity = ParseClaimsFromJwt(token);
            var user = new ClaimsPrincipal(identity);
            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
        }

        public async Task MarkUserAsLoggedOut()
        {
            _cachedToken = null;
            await _sessionStorage.DeleteAsync("accessToken");
            var user = _anonymous;
            NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
        }

        private ClaimsIdentity ParseClaimsFromJwt(string jwt)
        {
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(jwt);

            var claims = token.Claims.ToList();

            return new ClaimsIdentity(claims, "jwt");
        }
    }
}

namespace Server.Core.Authentication
{
    public class JWTService
    {
        private readonly IHttpClientFactory _clientFactory;
        private readonly ProtectedSessionStorage _sessionStorage;
        private readonly JWTAuthenticationStateProvider _authProvider;
        private Timer? _refreshTimer;

        public JWTService(
            IHttpClientFactory clientFactory,
            ProtectedSessionStorage sessionStorage,
            JWTAuthenticationStateProvider authProvider)
        {
            _clientFactory = clientFactory;
            _sessionStorage = sessionStorage;
            _authProvider = authProvider;
        }

        public async Task InitializeAsync()
        {
            var tokenResult = await _sessionStorage.GetAsync<string>("accessToken");
            if (!tokenResult.Success || string.IsNullOrEmpty(tokenResult.Value))
                return;

            ScheduleRefresh(tokenResult.Value);
        }

        private void ScheduleRefresh(string accessToken)
        {
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(accessToken);
            var expires = token.ValidTo;

            var timeToExpiry = expires - DateTime.UtcNow;

            // –û–±–Ω–æ–≤–∏–º –∑–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            var refreshIn = timeToExpiry - TimeSpan.FromMinutes(1);

            if (refreshIn < TimeSpan.Zero)
                refreshIn = TimeSpan.Zero;

            _refreshTimer?.Dispose();
            _refreshTimer = new Timer(async _ => await RefreshTokenAsync(), null, refreshIn, Timeout.InfiniteTimeSpan);
        }

        private async Task RefreshTokenAsync()
        {
            var refreshTokenResult = await _sessionStorage.GetAsync<string>("refreshToken");
            if (!refreshTokenResult.Success || string.IsNullOrWhiteSpace(refreshTokenResult.Value))
                return;

            var client = _clientFactory.CreateClient("ServerAPI");

            var response = await client.PostAsJsonAsync("auth/refresh", new
            {
                RefreshToken = refreshTokenResult.Value
            });

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (data != null && data.TryGetValue("accessToken", out var newToken))
                {
                    await _sessionStorage.SetAsync("accessToken", newToken);
                    await _authProvider.MarkUserAsAuthenticated(newToken);
                    ScheduleRefresh(newToken);
                }
            }
            else
            {
                await _authProvider.MarkUserAsLoggedOut(); // refresh –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –≤—ã—Ö–æ–¥–∏–º
            }
        }
    }
}

var jwtKey = "BodyProjectJWT"; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤

builder.Services.AddAuthentication(options =>
	{
		options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
		options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
	}) // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ö–µ–º–∞ 'Bearer').
	.AddJwtBearer(options =>
	{ 
		options.SaveToken = true; // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–Ω—É—Ç—Ä–∏ HttpContext(–Ω–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ HttpContext.GetTokenAsync())
		options.TokenValidationParameters = new TokenValidationParameters // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–¥–∞—Ç–µ–ª—è
		{
			ValidateIssuer = true, // –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É issuer
            ValidIssuer = "ServerBP", // –£–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ issuer —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º–º. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
			ValidateAudience = true,  // –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É audience
			ValidAudience = "AppicationBP", // –£–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ audience(–∫—Ç–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–∞) –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			ValidateIssuerSigningKey = true, // –í–ª—é–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–¥–¥–µ–ª–∞—Ç—å –Ω–µ–ª—å–∑—è
			IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey)), // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π –∫–ª—é—á (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞)
			ValidateLifetime = true, // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (exp)
			ClockSkew = TimeSpan.FromSeconds(300) // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º
		};
	});
builder.Services.AddAuthorization(); // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç–∫—Ç—É—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ([Authorize], Police, —Ä–æ–ª–∏ ...)

builder.Services.AddScoped<JWTAuthenticationStateProvider>();
builder.Services.AddScoped<AuthenticationStateProvider>(sp => sp.GetRequiredService<JWTAuthenticationStateProvider>());
builder.Services.AddScoped<ProtectedSessionStorage>();

builder.Services.AddScoped<JWTService>();
